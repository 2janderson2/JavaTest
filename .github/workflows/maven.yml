# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    # - name: Update dependency graph
    #   uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

        # Step 4: Perform a Sonatype Lifecycle evaluation.
      # This step requires you to configure secrets and update the placeholder values.
    - name: Run Sonatype Lifecycle evaluation
      id: evaluate
      uses: sonatype/actions/evaluate@v1
      with:
          # IMPORTANT: Replace with your Sonatype Lifecycle server URL
          iq-server-url: https://6b9cba9ad517.ngrok-free.app/
          # IMPORTANT: These secrets must be created in your repository settings
          username: admin
          password: admin1234
          # IMPORTANT: Replace with your application ID in Sonatype Lifecycle
          application-id: testjava
          # Scans the pom.xml file for dependencies.
          scan-targets: pom.xml
          # Add stage
          stage: release

      # Step 5 (Optional): Print the results of the scan for debugging.
    - name: Log evaluation output
      run: echo "Scan ID ${{ steps.evaluate.outputs.scan-id }} is available at ${{ steps.evaluate.outputs.report-url }}"
